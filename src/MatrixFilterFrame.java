
import java.awt.Color;
import java.util.Random;
import javax.swing.JFormattedTextField;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author usuario
 */
public class MatrixFilterFrame extends javax.swing.JFrame {

    private int threshold;

    /**
     * Creates new form MatrixFilterFrame
     */
    public MatrixFilterFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        thresholdSelector = new javax.swing.JSlider();
        minValueField = new javax.swing.JFormattedTextField();
        maxValueField = new javax.swing.JFormattedTextField();
        matrixDimensionField = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        matrixDisplayArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DIU Matrix Filter Free Trial");
        setMinimumSize(new java.awt.Dimension(500, 330));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        thresholdSelector.setMaximum(0);
        thresholdSelector.setMinorTickSpacing(1);
        thresholdSelector.setSnapToTicks(true);
        thresholdSelector.setToolTipText("");
        thresholdSelector.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSelectorStateChanged(evt);
            }
        });

        minValueField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        minValueField.setMinimumSize(new java.awt.Dimension(60, 20));
        minValueField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minValueFieldKeyReleased(evt);
            }
        });

        maxValueField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        maxValueField.setMinimumSize(new java.awt.Dimension(60, 20));
        maxValueField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxValueFieldActionPerformed(evt);
            }
        });
        maxValueField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxValueFieldKeyReleased(evt);
            }
        });

        matrixDimensionField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        matrixDimensionField.setMinimumSize(new java.awt.Dimension(60, 20));
        matrixDimensionField.setPreferredSize(new java.awt.Dimension(60, 20));
        matrixDimensionField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                matrixDimensionFieldCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                matrixDimensionFieldInputMethodTextChanged(evt);
            }
        });
        matrixDimensionField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                matrixDimensionFieldKeyReleased(evt);
            }
        });

        jLabel1.setText("Threshold Value:");

        jLabel2.setText("Minimum Matrix Value:");

        jLabel3.setText("Maximum Matrix Value:");

        jLabel4.setText("Matrix Dimension:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thresholdSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(matrixDimensionField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matrixDimensionField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(thresholdSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(26, 26, 26))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        matrixDisplayArea.setEditable(false);
        matrixDisplayArea.setColumns(20);
        matrixDisplayArea.setRows(5);
        jScrollPane1.setViewportView(matrixDisplayArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maxValueFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxValueFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxValueFieldActionPerformed

    private void matrixDimensionFieldCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_matrixDimensionFieldCaretPositionChanged
    }//GEN-LAST:event_matrixDimensionFieldCaretPositionChanged

    private void matrixDimensionFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_matrixDimensionFieldInputMethodTextChanged

    }//GEN-LAST:event_matrixDimensionFieldInputMethodTextChanged

    private void matrixDimensionFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_matrixDimensionFieldKeyReleased
        if (checkTextField(matrixDimensionField)) {
            int newDimension = Integer.parseInt(matrixDimensionField.getText());
            generateMatrix(newDimension);
            fillAndDisplayMatrixIfBoundsAreSet();
        } else {
            matrixDisplayArea.setText("Specify the dimension");
        }
    }//GEN-LAST:event_matrixDimensionFieldKeyReleased

    private void minValueFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minValueFieldKeyReleased
        if (checkTextField(matrixDimensionField)) {
            updateSlider();
            fillAndDisplayMatrixIfBoundsAreSet();
        } else {
            matrixDisplayArea.setText("Specify the dimension");
        }
    }//GEN-LAST:event_minValueFieldKeyReleased

    private void maxValueFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxValueFieldKeyReleased
        if (checkTextField(matrixDimensionField)) {
            updateSlider();
            fillAndDisplayMatrixIfBoundsAreSet();
        } else {
            matrixDisplayArea.setText("Specify the dimension");
        }
    }//GEN-LAST:event_maxValueFieldKeyReleased

    private void thresholdSelectorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSelectorStateChanged
        threshold = thresholdSelector.getValue();
        displayMatrix();
    }//GEN-LAST:event_thresholdSelectorStateChanged

    private void generateMatrix(int dimension) {
        matrix = new int[dimension][dimension];
    }

    private void fillAndDisplayMatrixIfBoundsAreSet() {
        if (boundsSet()) {
            int maxValue = Integer.parseInt(maxValueField.getText());
            int minValue = Integer.parseInt(minValueField.getText());
            for (int[] row : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    row[j] = valuesGenerator.nextInt(maxValue - minValue + 1)
                            + minValue;
                }
            }
            displayMatrix();
        }
    }

    private boolean boundsSet() {
        boolean res = checkTextField(maxValueField);
        res = checkTextField(minValueField) && res;
        return res ? checkBounds(maxValueField, minValueField) : false;
    }

    private boolean checkTextField(JFormattedTextField field) {
        if (field.getText().equals("")) {
            field.setBackground(Color.red);
            return false;
        } else {
            field.setBackground(Color.white);
            return true;
        }
    }

    private boolean checkBounds(JFormattedTextField maxValue, JFormattedTextField minValue) {
        if (Integer.parseInt(maxValue.getText()) < Integer.parseInt(minValue.getText())) {
            maxValue.setBackground(Color.red);
            minValue.setBackground(Color.red);
            matrixDisplayArea.setText("Minimum has to be lower than maximum");
            return false;
        } else {
            maxValue.setBackground(Color.white);
            minValue.setBackground(Color.white);
            return true;
        }
    }

    private void displayMatrix() {
        matrixDisplayArea.setText("");
        for (int i = 0; i < matrix.length; i++) {
            matrixDisplayArea.append("| ");
            for (int j = 0; j < matrix.length - 1; j++) {
                if (matrix[i][j] > threshold) {
                    matrixDisplayArea.append(matrix[i][j] + "\t");
                } else {
                    matrixDisplayArea.append("-\t");
                }
            }
            if (matrix[i][matrix.length - 1] > threshold) {
                matrixDisplayArea.append(matrix[i][matrix.length - 1] + "|\n");
            } else {
                matrixDisplayArea.append("-|\n");
            }
        }
    }

    private void updateSlider() {
        if (boundsSet()) {
            int min = Integer.parseInt(minValueField.getText());
            int max = Integer.parseInt(maxValueField.getText());
            max = (max+4)/5*5;
            min = min/5*5;
            thresholdSelector.setMinimum(min);
            thresholdSelector.setMaximum(max);
            thresholdSelector.setLabelTable(null);
            thresholdSelector.setMajorTickSpacing(max > 5 ? 5:1);
            thresholdSelector.setPaintTicks(true);
            thresholdSelector.setPaintLabels(true);
            thresholdSelector.setValue((max - min) / 2 + min);
            threshold = (max - min) / 2 + min;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixFilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixFilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixFilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixFilterFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatrixFilterFrame().setVisible(true);
            }
        });
    }

    private int[][] matrix;
    private final Random valuesGenerator = new Random();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField matrixDimensionField;
    private javax.swing.JTextArea matrixDisplayArea;
    private javax.swing.JFormattedTextField maxValueField;
    private javax.swing.JFormattedTextField minValueField;
    private javax.swing.JSlider thresholdSelector;
    // End of variables declaration//GEN-END:variables

}
